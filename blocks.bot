# change these!

INPUT_FILE = 'tavern.txt'
size(480, 540)
BLOCK_SIZE = 5
ORIGIN_X = 150
ORIGIN_Y = 100

from random import randint
import numpy as np

colormode(RGB)
colorrange(255)

bs = BLOCK_SIZE


def block(x,y, blocktype):
    '''
    draw an isometric square prism; x,y are the coordinates of
    the BOTTOM-CENTER corner, z is the height
    '''
    
    if blocktype in BLOCKDEFS:
        blockcolor = BLOCKDEFS[blocktype]
    else:
        blockcolor = color(64, 64, 64)
    
    z = bs * 2.5
    
    # no strokes in the inside
    nostroke()

    # LEFT FACE
    # first, set the color
    c = color(blockcolor)
    fill(c)
    # and draw the path
    beginpath(x, y)
    lineto(x-bs*2, y-bs)
    lineto(x-bs*2, y-bs-z)
    lineto(x, y-z)
    endpath()

    # RIGHT FACE
    # darker
    c = color(blockcolor)
    c.brightness -= .075
    fill(c)
    beginpath(x, y)
    lineto(x+bs*2, y-bs)
    lineto(x+bs*2, y-bs-z)
    lineto(x, y-z)
    endpath()

    # TOP FACE
    # 
    c = color(blockcolor)
    c.brightness -= .15
    fill(c)
    beginpath(x, y-z)
    lineto(x+bs*2, y-bs-z)
    lineto(x, y-bs*2-z)
    lineto(x-bs*2, y-bs-z)
    endpath()

def setup():
    pass

def parse_line(line):
    coordtuple, blocktype = line.split(':')
    x, y, z = coordtuple.strip('()').split(',')
    x = int(x)
    y = int(y)
    z = int(z)
    blocktype = int(blocktype.strip())
    return x, y, z, blocktype

def draw():
    # white background
    background(1,1,1)

    # start from 40, 40
    translate(40, 40)
    # and draw the blocks
    
    lines = list(open(INPUT_FILE, 'r').readlines())
    # last line holds the coordinates
    max_x, max_y, max_z, bt = parse_line(lines[-1])
    
    matrix = np.empty((max_x+1, max_y+1, max_z+1))
    
    TYPES = []
    for line in lines:
        x,y,z,blocktype = parse_line(line)
        matrix[x,y,z] = blocktype
        TYPES.append(blocktype)
    print set(TYPES)
    del lines
        


    # we do a separate loop so we can draw them in order
    for y in range(max_y):
        for x in range(max_x):
            for z in range(max_z):
                blocktype = matrix[x,y,z]
                if blocktype:
                    px = ORIGIN_X + (x-z) * (2*bs)
                    py = ORIGIN_Y + (x+z) * bs - y*bs*2
                    block(px, py, blocktype)    
    
                    
